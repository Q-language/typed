% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/06_native_types.R
\name{Any}
\alias{Any}
\alias{Logical}
\alias{Integer}
\alias{Double}
\alias{Character}
\alias{Raw}
\alias{List}
\alias{Null}
\alias{Closure}
\alias{Special}
\alias{Builtin}
\alias{Environment}
\alias{Symbol}
\alias{Pairlist}
\alias{Language}
\alias{Expression}
\alias{Function}
\alias{Factor}
\alias{Data.frame}
\alias{Matrix}
\alias{Array}
\alias{Date}
\alias{Time}
\title{Native types of package 'typed'}
\usage{
Any(length, ...)

Logical(length, ...)

Integer(length, ...)

Double(length, ...)

Character(length, ...)

List(length, data_frame_ok, ...)

Null(...)

Closure(...)

Special(...)

Builtin(...)

Environment(...)

Symbol(...)

Pairlist(length, ...)

Language(...)

Expression(length, ...)

Function(...)

Factor(length, levels, ...)

Matrix(nrow, ncol, ...)

Array(dim, ...)

Data.frame(nrow, ncol, ...)

Date(length, ...)

Time(length, ...)

Logical(length, ...)

Integer(length, ...)

Double(length, ...)

Character(length, ...)

Raw(length, ...)

List(length, data_frame_ok = TRUE, ...)

Null(...)

Closure(...)

Special(...)

Builtin(...)

Environment(...)

Symbol(...)

Pairlist(length, ...)

Language(...)

Expression(length, ...)

Function(...)

Factor(length, levels, ...)

Data.frame(nrow, ncol, ...)

Matrix(nrow, ncol, ...)

Array(dim, ...)

Date(length, ...)

Time(length, ...)
}
\arguments{
\item{length}{length of the object}

\item{...}{additional conditions, see details.}

\item{data_frame_ok}{whether data frames are to be considered as lists}

\item{levels}{factor levels}

\item{nrow}{number of rows}

\item{ncol}{number of columns}

\item{dim}{dimensions}
}
\description{
These functions are type checkers, they produce assertion functions,
which take an object, verify assertions, and
returns the input, possibly modified (though never modified with native types).
}
\details{
Additional conditions can be provided :
\itemize{
\item If they are named, the name should be the name of a function to use on our
object, and the value should be the expected value.
\item If they are unnamed, they should be formulas, the right hand side should
be a condition, using \code{value} or \code{.} as a placeholder for the latter, and
the optional \code{lhs} an error message.
}

Any is the most general type checker, it doesn't check anything unless
provided additional conditions through \code{...}. Others use the base \verb{is.<type>} function
if available, or check that the object is of the relevant type with \code{typeof}
for atomic types, or check that the class of the checked value contains
the relevant class.
}
\examples{

\dontrun{
# fails
Integer() ? x <- 1
# equivalent to
declare("x", Integer(), value = 1)

Integer(2) ? x <- 1L

# we can use additional conditions in `...`
Integer(anyNA = FALSE) ? x <- c(1L, NA, 1L)
Integer(anyDuplicated = FALSE) ? x <- c(1L, NA, 1L)
}

Integer(2) ? x <- 11:12

\dontrun{
# We can also use it directly to test assertions
Integer() ? x <- 1
# equivalent to
declare("x", Integer(), value = 1)

Integer(2) ? x <- 1L
}

}
